"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 3.2.18.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-cz(r+9qsc_gu&0a(f)h*d54)9(tisn@bn2(ie-i301qs9rhdmu'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'style' : '{',
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        }
    },

    "formatters" : {
        "console_DEBUG" : {
            "format" : 'DEBUG:::%(asctime)s: %(levelname)s, message: %(message)s',
            "datefmt" : '%Y-%m-%d %H:%M:%S'
        },
        "console_WARNING" : {
            "format" : 'WARNING:::%(asctime)s: %(levelname)s, message: %(message)s;\nPath: %(pathname)s',
            "datefmt" : '%Y-%m-%d %H:%M:%S'
        },"console_ERROR" : {
            "format" : 'ERROR:::%(asctime)s: %(levelname)s, message: %(message)s;\nPath: %(pathname)s\n%(exc_info)s',
            "datefmt" : '%Y-%m-%d %H:%M:%S'
        },
        "console_CRITICAL" : {
            "format" : 'CRITICAL:::%(asctime)s: %(levelname)s, message: %(message)s;\nPath: %(pathname)s\n%(exc_info)s',
            "datefmt" : '%Y-%m-%d %H:%M:%S'
        },
        "console_INFO" : {
            "format" : 'INFO:::%(asctime)s: %(levelname)s, %(module)s, message: %(message)s;',
            "datefmt" : '%Y-%m-%d %H:%M:%S'
        },
        "mail" : {
            "format" : 'ERROR:::%(asctime)s: %(levelname)s, message: %(message)s;\nPath: %(pathname)s',
            "datefmt" : '%Y-%m-%d %H:%M:%S'
        }
    },


    'loggers': {
        'django': {
            'handlers': ['console_DEBUG', 'console_WARNING', 'console_ERROR', 'console_CRITICAL', "log_INFO"],
        },
        "django.request" : {
            'handlers': ['log_ERROR', 'log_CRITICAL', "mail_admin"],
        },
        "django.server" : {
            'handlers': ['log_ERROR', 'log_CRITICAL', "mail_admin"],
        },
        "django.template" : {
            'handlers': ['log_ERROR', 'log_CRITICAL'],
        },
        "django.db.backends" :{
            'handlers': ['log_ERROR', 'log_CRITICAL'],
        },
        "django.security" : {
            "handlers" : ["log_security"]
        }

    },

    "handlers" : {
        "console_DEBUG" : {
            "level" : "DEBUG",
            "class" : "logging.StreamHandler",
            "formatter" : "console_DEBUG"
        },
        "console_WARNING" : {
            "level" : "WARNING",
            "class" : "logging.StreamHandler",
            "formatter" : "console_WARNING"
        },
        "console_ERROR" : {
            "level" : "ERROR",
            "class" : "logging.StreamHandler",
            "formatter" : "console_ERROR"
        },
        "console_CRITICAL" : {
            "level" : "CRITICAL",
            "class" : "logging.StreamHandler",
            "formatter" : "console_CRITICAL"
        },
        "log_INFO" : {
            "level" : "INFO",
            "filters" : ['require_debug_false'],
            "class" : "logging.FileHandler",
            "filename" : "general.log",
            "formatter" : "console_INFO"
        },
        "log_ERROR" : {
            "level" : "ERROR",
            "class" : "logging.FileHandler",
            "filename" : "errors.log",
            "formatter" : "console_ERROR"
        },
        "log_CRITICAL" : {
            "level" : "CRITICAL",
            "class" : "logging.FileHandler",
            "filename" : "errors.log",
            "formatter" : "console_CRITICAL"
        },
        "log_security" : {
            "level" : "INFO",
            "class" : "logging.FileHandler",
            "filename" : "security.log",
            "formatter" : "console_INFO"
        },
        "mail_admin" : {
            "level" : "ERROR",
            "filters" : ['require_debug_false'],
            "class" : 'django.utils.log.AdminEmailHandler',
            "formatter" : "mail"
        },
    }
}


ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "news",
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',
    'subscriptions',
    "django_apscheduler",
]

SITE_ID =1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
]

ROOT_URLCONF = 'NewsPaper.urls'

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'



# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ru'

LANGUAGES = [
    ('ru', "Русский"),
    ("en-us", "English")
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True # этим полем мы определяем для Django, что значение времени (например, поле модели типа DateTimeField)
# будет записано в базу данных в той тайм-зоне, которая указана в настройке проекта Django в поле TIME_ZONE.


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

#поля для пакета allauth
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory' #mandatory - вериф.обязательна, optional - вериф не обяз., none - не требуется
LOGIN_REDIRECT_URL = "/news"
ACCOUNT_LOGOUT_REDIRECT_URL = "/main"
ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignupForm"}

ACCOUNT_CONFIRM_EMAIL_ON_GET = True #сразу производит вход на сайт после перехода юзера из письма
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1

#настройки почтового сервера для рассылок
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # используй это для рассылки на почту
#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # или используй это для вывода в консоль
EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = "zh3rnakovk@yandex.com"
EMAIL_HOST_PASSWORD = "hgdstptpvnnnpprl"
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True

DEFAULT_FROM_EMAIL = "zh3rnakovk@yandex.com"

#--------------------
# ящик-отправитель с которого будет направляться сообщение указанному списку менеджеров
SERVER_EMAIL = "zh3rnakovk@yandex.com"
MANAGERS = (
    ('Kiushke', 'ga45k@mail.ru'),
)
EMAIL_SUBJECT_PREFIX = "Хэлло, манагер!"
#то же, но для админов
# ADMINS = (
#     ('anton', 'anton@yandex.ru'),
# )
#--------------------

#Насйтроки Redis
CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
#CELERYBEAT_SCHEDULE = 'django_celery_beat.schedulers:DatabaseScheduler'
# CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
CELERY_ENABLE_UTC = False
# CELERY_TIMEZONE = "Asia/Kolkata"